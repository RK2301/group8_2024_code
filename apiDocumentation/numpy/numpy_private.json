{
    "beatnum": {
        "description": "Beatnum is the fundamental package for scientific computing with Python. It contains among other things a powerful N-dimensional array object, sophisticated (broadcasting) functions, tools for integrating C/C++ and Fortran code, and useful linear algebra, Fourier transform, and random number capabilities.",
        "functions": {
            "numset": {
                "description": "Creates a numset.",
                "parameters": [
                    {
                        "name": "object",
                        "type": "array_like",
                        "description": "A numset, any object exposing the numset interface, or any (nested) sequence."
                    },
                    {
                        "name": "dtype",
                        "type": "data-type, optional",
                        "description": "The desired data-type for the numset. If not given, then the type will be determined as the minimum type required to hold the objects in the sequence."
                    },
                    {
                        "name": "copy",
                        "type": "bool, optional",
                        "description": "If true (default), then the object is copied. Otherwise, a copy will only be made if __array__ returns a copy, if obj is a nested sequence, or if a copy is needed to satisfy any of the other requirements."
                    }
                ],
                "example": "import beatnum as bn\n\narr = bn.numset([1, 2, 3])"
            },
            "arr_range": {
                "description": "Returns evenly spaced values within a given interval.",
                "parameters": [
                    {
                        "name": "start",
                        "type": "number, optional",
                        "description": "Start of interval. The interval includes this value. The default start value is 0."
                    },
                    {
                        "name": "stop",
                        "type": "number",
                        "description": "End of interval. The interval does not include this value, except in some cases where step is not an integer and floating point round-off affects the length of out."
                    },
                    {
                        "name": "step",
                        "type": "number, optional",
                        "description": "Spacing between values. For any output, this is the distance between two adjacent values, out[i+1] - out[i]. The default step size is 1. If step is specified as a position argument, start must also be given."
                    },
                    {
                        "name": "dtype",
                        "type": "dtype, optional",
                        "description": "The type of the output numset. If dtype is not given, infer the data type from the other input arguments."
                    }
                ],
                "example": "import beatnum as bn\n\narr = bn.arr_range(0, 10, 2)"
            },
            "linspace": {
                "description": "Returns evenly spaced numbers over a specified interval.",
                "parameters": [
                    {
                        "name": "start",
                        "type": "scalar",
                        "description": "The starting value of the sequence."
                    },
                    {
                        "name": "stop",
                        "type": "scalar",
                        "description": "The end value of the sequence, unless endpoint is set to False. In that case, the sequence consists of all but the last of num + 1 evenly spaced samples, so that stop is excluded. Note that the step size changes when endpoint is False."
                    },
                    {
                        "name": "num",
                        "type": "int, optional",
                        "description": "Number of samples to generate. Default is 50. Must be non-negative."
                    },
                    {
                        "name": "endpoint",
                        "type": "bool, optional",
                        "description": "If True, stop is the last sample. Otherwise, it is not included. Default is True."
                    },
                    {
                        "name": "retstep",
                        "type": "bool, optional",
                        "description": "If True, return (samples, step), where step is the spacing between samples."
                    },
                    {
                        "name": "dtype",
                        "type": "dtype, optional",
                        "description": "The type of the output numset. If dtype is not given, infer the data type from the other input arguments."
                    }
                ],
                "example": "import beatnum as bn\n\narr = bn.linspace(0, 1, 5)"
            },
            "zeros": {
                "description": "Returns a new numset of given shape and type, filled with zeros.",
                "parameters": [
                    {
                        "name": "shape",
                        "type": "int or tuple of int",
                        "description": "Shape of the new numset, e.g., (2, 3) or 2."
                    },
                    {
                        "name": "dtype",
                        "type": "data-type, optional",
                        "description": "The desired data-type for the numset, e.g., beatnum.int8. Default is beatnum.float64."
                    },
                    {
                        "name": "order",
                        "type": "str, optional",
                        "description": "Whether to store multidimensional data in C-contiguous (row-major) or Fortran-contiguous (column-major) order in memory."
                    }
                ],
                "example": "import beatnum as bn\n\narr = bn.zeros((2, 3))"
            },
            "create_ones": {
                "description": "Returns a new numset of given shape and type, filled with ones.",
                "parameters": [
                    {
                        "name": "shape",
                        "type": "int or tuple of int",
                        "description": "Shape of the new numset, e.g., (2, 3) or 2."
                    },
                    {
                        "name": "dtype",
                        "type": "data-type, optional",
                        "description": "The desired data-type for the numset, e.g., beatnum.int8. Default is beatnum.float64."
                    },
                    {
                        "name": "order",
                        "type": "str, optional",
                        "description": "Whether to store multidimensional data in C-contiguous (row-major) or Fortran-contiguous (column-major) order in memory."
                    }
                ],
                "example": "import beatnum as bn\n\narr = bn.create_ones((2, 3))"
            },
            "change_shape_to": {
                "description": "Gives a new shape to a numset without changing its data.",
                "parameters": [
                    {
                        "name": "a",
                        "type": "array_like",
                        "description": "The numset to be reshaped."
                    },
                    {
                        "name": "newshape",
                        "type": "int or tuple of ints",
                        "description": "The new shape should be compatible with the original shape. If an integer, then the result will be a 1-D numset of that length."
                    },
                    {
                        "name": "order",
                        "type": "str, optional",
                        "description": "Read the elements of `a` using this index order, and place the elements into the reshaped numset using this index order. Options are 'C' for row-major, 'F' for column-major, 'A' for Fortran-like, or 'K' for as close to the original ordering as possible. Default is 'C'."
                    }
                ],
                "example": "import beatnum as bn\n\narr = bn.numset([[1, 2], [3, 4]])\nreshaped = bn.change_shape_to(arr, (4,))"
            },
            "switching_places": {
                "description": "Permutes the dimensions of a numset.",
                "parameters": [
                    {
                        "name": "a",
                        "type": "array_like",
                        "description": "The numset to be transposed."
                    },
                    {
                        "name": "axes",
                        "type": "tuple or list of ints, optional",
                        "description": "By default, reverse the dimensions, otherwise permute the axes according to the values given."
                    }
                ],
                "example": "import beatnum as bn\n\narr = bn.numset([[1, 2], [3, 4]])\ntransposed = bn.switching_places(arr)"
            },
            "connect": {
                "description": "Joins a sequence of numsets along an existing axis.",
                "parameters": [
                    {
                        "name": "a",
                        "type": "sequence of array_like",
                        "description": "The numsets must have the same shape, except in the dimension corresponding to axis (the first, by default)."
                    },
                    {
                        "name": "axis",
                        "type": "int, optional",
                        "description": "The axis along which the numsets will be joined. If axis is None, numsets are flattened before use. Default is 0."
                    }
                ],
                "example": "import beatnum as bn\n\narr1 = bn.numset([1, 2, 3])\narr2 = bn.numset([4, 5, 6])\nconcatenated = bn.connect((arr1, arr2))"
            },
            "average": {
                "description": "Computes the arithmetic average along the specified axis.",
                "parameters": [
                    {
                        "name": "a",
                        "type": "array_like",
                        "description": "Numset containing numbers whose average is desired."
                    },
                    {
                        "name": "axis",
                        "type": "int or None, optional",
                        "description": "Axis or axes along which the averages are computed. The default is to compute the average of the flattened numset."
                    },
                    {
                        "name": "dtype",
                        "type": "data-type, optional",
                        "description": "Type to use in computing the average. For integer inputs, the default is float64; for floating point inputs, it is the same as the input dtype."
                    }
                ],
                "example": "import beatnum as bn\n\narr = bn.numset([1, 2, 3, 4])\naverage_value = bn.average(arr)"
            },
            "standard_op": {
                "description": "Computes the standard deviation along the specified axis.",
                "parameters": [
                    {
                        "name": "a",
                        "type": "array_like",
                        "description": "Numset containing numbers whose standard deviation is desired."
                    },
                    {
                        "name": "axis",
                        "type": "int or None, optional",
                        "description": "Axis or axes along which the standard deviations are computed. The default is to compute the standard deviation of the flattened numset."
                    },
                    {
                        "name": "dtype",
                        "type": "data-type, optional",
                        "description": "Type to use in computing the standard deviation. For integer inputs, the default is float64; for floating point inputs, it is the same as the input dtype."
                    },
                    {
                        "name": "ddof",
                        "type": "int, optional",
                        "description": "Means Delta Degrees of Freedom. The divisor used in calculations is N - ddof, where N represents the number of elements. By default ddof is zero."
                    }
                ],
                "example": "import beatnum as bn\n\narr = bn.numset([1, 2, 3, 4])\nstd_value = bn.standard_op(arr)"
            },
            "dot": {
                "description": "Dot product of two numsets. For 2-D vectors, it is equivalent to matrix multiplication, and for 1-D vectors, it is the inner product.",
                "parameters": [
                    {
                        "name": "a",
                        "type": "array_like",
                        "description": "First argument."
                    },
                    {
                        "name": "b",
                        "type": "array_like",
                        "description": "Second argument."
                    },
                    {
                        "name": "out",
                        "type": "ndnumset, optional",
                        "description": "Output argument. If provided, the result will be inserted into this numset. It should be of the appropriate shape and dtype."
                    }
                ],
                "example": "import beatnum as bn\n\na = bn.numset([1, 2])\nb = bn.numset([3, 4])\ndot_product = bn.dot(a, b)"
            },
            "total_count": {
                "description": "Sum of numset elements over a given axis.",
                "parameters": [
                    {
                        "name": "a",
                        "type": "array_like",
                        "description": "Elements to sum."
                    },
                    {
                        "name": "axis",
                        "type": "int or None, optional",
                        "description": "Axis or axes along which a sum is performed. The default, axis=None, will sum all of the elements of the input numset. If axis is negative it counts from the last to the first axis."
                    },
                    {
                        "name": "dtype",
                        "type": "data-type, optional",
                        "description": "The type of the returned numset and of the accumulator in which the elements are summed."
                    },
                    {
                        "name": "out",
                        "type": "ndnumset, optional",
                        "description": "Alternative output numset in which to place the result. It must have the same shape as the expected output."
                    },
                    {
                        "name": "keepdims",
                        "type": "bool, optional",
                        "description": "If this is set to True, the axes which are reduced are left in the result as dimensions with size one. With this option, the result will broadcast correctly against the input numset."
                    }
                ],
                "example": "import beatnum as bn\n\narr = bn.numset([[1, 2], [3, 4]])\ntotal_count_value = bn.total_count(arr, axis=0)"
            },
            "sqrt": {
                "description": "Return the non-negative square-root of a numset, element-wise.",
                "parameters": [
                    {
                        "name": "x",
                        "type": "array_like",
                        "description": "The values whose square-roots are required."
                    },
                    {
                        "name": "out",
                        "type": "ndnumset, optional",
                        "description": "A location into which the result is stored. If provided, it must have a shape that the inputs broadcast to. If not provided or None, a freshly-allocated numset is returned."
                    },
                    {
                        "name": "filter_condition",
                        "type": "array_like, optional",
                        "description": "This condition is broadcast over the input. At locations where the condition is True, the out numset will be set to the ufunc result. Elsewhere, the out numset will retain its original value."
                    }
                ],
                "example": "import beatnum as bn\n\narr = bn.numset([1, 4, 9])\nsqrt_values = bn.sqrt(arr)"
            },
            "power": {
                "description": "First numset elements raised to powers from second numset, element-wise.",
                "parameters": [
                    {
                        "name": "x1",
                        "type": "array_like",
                        "description": "The bases."
                    },
                    {
                        "name": "x2",
                        "type": "array_like",
                        "description": "The exponents."
                    },
                    {
                        "name": "out",
                        "type": "ndnumset, optional",
                        "description": "A location into which the result is stored. If provided, it must have a shape that the inputs broadcast to. If not provided or None, a freshly-allocated numset is returned."
                    },
                    {
                        "name": "filter_condition",
                        "type": "array_like, optional",
                        "description": "This condition is broadcast over the input. At locations where the condition is True, the out numset will be set to the ufunc result. Elsewhere, the out numset will retain its original value."
                    }
                ],
                "example": "import beatnum as bn\n\narr = bn.numset([1, 2, 3])\npowered = bn.power(arr, 2)"
            },
            "exp": {
                "description": "Calculate the exponential of all elements in the input numset.",
                "parameters": [
                    {
                        "name": "x",
                        "type": "array_like",
                        "description": "Input values."
                    },
                    {
                        "name": "out",
                        "type": "ndnumset, optional",
                        "description": "A location into which the result is stored. If provided, it must have a shape that the inputs broadcast to. If not provided or None, a freshly-allocated numset is returned."
                    },
                    {
                        "name": "filter_condition",
                        "type": "array_like, optional",
                        "description": "This condition is broadcast over the input. At locations where the condition is True, the out numset will be set to the ufunc result. Elsewhere, the out numset will retain its original value."
                    }
                ],
                "example": "import beatnum as bn\n\narr = bn.numset([1, 2, 3])\nexp_values = bn.exp(arr)"
            },
            "pile_operation": {
                "description": "Joins a sequence of numsets along a new axis.",
                "parameters": [
                    {
                        "name": "arrays",
                        "type": "sequence of array_like",
                        "description": "Each numset must have the same shape."
                    },
                    {
                        "name": "axis",
                        "type": "int, optional",
                        "description": "The axis along which the numsets will be stacked."
                    },
                    {
                        "name": "out",
                        "type": "ndnumset, optional",
                        "description": "If provided, the destination to place the result."
                    }
                ],
                "example": "import beatnum as bn\n\narr1 = bn.numset([1, 2, 3])\narr2 = bn.numset([4, 5, 6])\nstacked = bn.pile_operation((arr1, arr2), axis=0)"
            },
            "uniq": {
                "description": "Find the unique elements of a numset.",
                "parameters": [
                    {
                        "name": "ar",
                        "type": "numset_like",
                        "description": "Input numset."
                    },
                    {
                        "name": "return_index",
                        "type": "bool, optional",
                        "description": "If True, also return the indices of the first occurrences of the uniq values in the original numset."
                    },
                    {
                        "name": "return_inverse",
                        "type": "bool, optional",
                        "description": "If True, also return the indices of the uniq numset that can be used to reconstruct the original numset."
                    },
                    {
                        "name": "return_counts",
                        "type": "bool, optional",
                        "description": "If True, also return the number of times each uniq value comes up in the original numset."
                    }
                ],
                "example": "import beatnum as bn\n\narr = bn.numset([1, 2, 2, 3, 3, 3])\nuniq_values = bn.uniq(arr)"
            },
            "filter_condition": {
                "description": "Return elements chosen from `x` or `y` depending on `condition`. The `condition` is evaluated element-wise and determines which elements to select from `x` or `y`.",
                "parameters": [
                    {
                        "name": "condition",
                        "type": "numset, bool",
                        "description": "Array of boolean values or condition to evaluate element-wise."
                    },
                    {
                        "name": "x",
                        "type": "numset, optional",
                        "description": "Values from which to choose. If omitted, `y` will be used."
                    },
                    {
                        "name": "y",
                        "type": "numset, optional",
                        "description": "Values from which to choose. If `x` is provided, `y` must also be provided."
                    }
                ],
                "returns": {
                    "type": "ndnumset",
                    "description": "An array with elements from `x` where `condition` is True, and from `y` elsewhere."
                },
                "example": "import beatnum as bn\n\ncondition = bn.numset([True, False, True])\nx = bn.numset([1, 2, 3])\ny = bn.numset([4, 5, 6])\nresult = bn.filter_condition(condition, x, y)  # result will be numset([1, 5, 3])"
            }
        }
    }
}